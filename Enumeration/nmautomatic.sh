#!/bin/bash

# This is an overview of some of the stuff that needs to be done in order to create this script:
# check the user running to see if sudo
#         if user is not sudo, print that certain modules may not run

# read user input for ip, or port
#         If ip only, run full scans, if port is specified run commands against that port along with scripts

# Optional: give user feedback as scans are running.
#         one '--' for every 10%

# Print output to window as well
#         optional: set display colors to create nicer looking binary

# Output results to a fileDONE, using ip name and timestamping with date and hour:minute
#         If file already exists, rename the existing file with (old)
current_dir=$(pwd)

next_function(){
        if [ "$modulename" == "" ]; then
                modulename="Simple Nmap Scan"
                id="1"
        elif [ "$modulename" == "Service Scan Nmap" ]; then
                id="2"
        elif [ "$modulename" == "Script Scan Nmap" ]; then
                id="3"
        elif [ "$modulename" == "Done" ]; then
                find $current_dir -name 'autoscan_*' -exec cat {} \; > completed_autoscan_$ip.txt
                find $current_dir -name 'autoscan_*' -exec rm {} \;
                exit
        else
                exit
        fi


        if [ "$id" == "1" ]; then
                simple_nmap
        elif [ "$id" == "2" ]; then
                service_nmap
        elif [ "$id" == "3" ]; then
                script_nmap
        fi
}

banner(){
        printf "(============================================================================)\n"
        printf "\t\t\t $modulename \n"
        printf "(============================================================================)\n" 
}

 simple_nmap(){
        banner > autoscan_temp1_$ip.txt
        if [ "$pn" == "" ]; then
                printf "Beginning a simple nmap scan on $ip"
                echo
                nmap -T4 $ip >> autoscan_temp1_$ip.txt
        else
                echo "Host may be down, running scans in -Pn mode"
                nmap -T4 -Pn $ip >> autoscan_temp1_$ip.txt
        fi

        down=$( grep -i "Host seems down." autoscan_temp1_$ip.txt )
        offline=$( grep -i "All 1000 scanned ports on 10 (0.0.0.10) are in ignored states." autoscan_temp1_$ip.txt )

        if [ "$pn" == "" ] && [ -n "$down" ]; then
                pn="1"
                simple_nmap
        elif [ "$pn" == "1" ] && [ -n "$offline" ]; then
                printf "Host appears to be down or address is incorrect.\n  Running -Pn also did not work on this host.\n  Please confirm that the host address is correct."
                rm autoscan_temp1_$ip.txt
                exit
        fi

        wait
        cat autoscan_temp1_$ip.txt
        echo
        echo 
        modulename="Service Scan Nmap"
        next_function
 }

  service_nmap(){
        banner > autoscan_temp2_$ip.txt
        if [ "$pn" == "" ]; then
                printf "Beginning an nmap service scan on $ip"
                echo
                nmap -sV $ip >> autoscan_temp2_$ip.txt
        else
                echo "Running scans in -Pn mode"
                nmap -Pn -sV $ip >> autoscan_temp2_$ip.txt
        fi
        wait
        cat autoscan_temp2_$ip.txt
        echo
        echo 
        modulename="Script Scan Nmap"
        next_function
 }

  script_nmap(){
        banner > autoscan_temp3_$ip.txt
        if [ "$pn" == "" ]; then
                printf "Beginning an nmap script scan on $ip"
                echo
                nmap -sC $ip >> autoscan_temp3_$ip.txt
        else
                echo "Running scans in -Pn mode"
                nmap -Pn -sC $ip >> autoscan_temp3_$ip.txt
        fi
        wait
        cat autoscan_temp3_$ip.txt
        wait
        echo
        echo 
        modulename="Done"
        next_function
 }

read -p 'Please enter the ip address you would like to scan: ' ip
echo
next_function


