#!/bin/bash

# This is an overview of some of the stuff that needs to be done in order to create this script:
# check the user running to see if sudo
#         if user is not sudo, print that certain modules may not run

# read user input for ip, or port
#         If ip only, run full scans, if port is specified run commands against that port along with scripts

# Optional: give user feedback as scans are running.
#         one '--' for every 10%

# Print output to window as well
#         optional: set display colors to create nicer looking binary

# Output results to a fileDONE, using ip name and timestamping with date and hour:minute
#         If file already exists, rename the existing file with (old)
current_dir=$(pwd)
wordlist=$(locate 'common.txt' | grep dirb | sed '/_common.txt$/d')
dnslist=$(locate 'top1million-5000')


next_function(){
        if [ -z $id ]; then
                modulename="Simple Nmap Scan"
                id="1"
                simple_nmap
        elif [ "$id" == "2" ]; then
                modulename="Service Nmap Scan"
                service_nmap
        elif [ "$id" == "3" ]; then
                modulename="Script Nmap Scan"
                script_nmap
        elif [ "$id" == "4" ]; then
                find $current_dir -name 'autoscan_*' -exec cat {} \; > completed_autonmap_$ip.txt
                find $current_dir -name 'autoscan_*' -exec rm {} \;
                modulename="HTTP Check"
                http_check
        elif [ "$id" == "Done" ]; then
                find $current_dir -name 'completed_*' -exec cat {} \; > completed_autoscan_$ip.txt
                find $current_dir -name 'autoscan_*' -exec rm {} \;
                exit
        else
                exit
        fi

}

banner(){
        printf "(============================================================================)\n"
        printf "\t\t\t $modulename \n"
        printf "(============================================================================)\n" 
}

spaces(){
        echo
        echo
        echo
}

 simple_nmap(){
        banner > autoscan_temp1_$ip.txt
        if [ -z "$pn" ]; then
                printf "Beginning a simple nmap scan on $ip"
                echo
                nmap -T4 $ip >> autoscan_temp1_$ip.txt
        else
                echo "Host may be down, running scans in -Pn mode"
                nmap -T4 -Pn $ip >> autoscan_temp1_$ip.txt
        fi

        down=$( grep -i "Host seems down." autoscan_temp1_$ip.txt )
        offline=$( grep -i "All 1000 scanned ports on 10 (0.0.0.10) are in ignored states." autoscan_temp1_$ip.txt )

        if [ -z "$pn" ] && [ -n "$down" ]; then
                pn="1"
                simple_nmap
        elif [ "$pn" == "1" ] && [ -n "$offline" ]; then
                printf "Host appears to be down or address is incorrect.\n  Running -Pn also did not work on this host.\n  Please confirm that the host address is correct."
                rm autoscan_temp1_$ip.txt
                exit
        fi

        wait
        cat autoscan_temp1_$ip.txt
        echo
        echo 
        ((id++))
        next_function
 }

  service_nmap(){
        banner > autoscan_temp2_$ip.txt
        if [ -z "$pn" ]; then
                printf "Beginning an nmap service scan on $ip"
                echo
                nmap -T4 -sV $ip >> autoscan_temp2_$ip.txt
        else
                echo "Running scans in -Pn mode"
                nmap -Pn -T4 -sV $ip >> autoscan_temp2_$ip.txt
        fi
        wait
        cat autoscan_temp2_$ip.txt
        echo
        echo 
        ((id++))
        next_function
 }

  script_nmap(){
        banner > autoscan_temp3_$ip.txt
        if [ -z "$pn" ]; then
                printf "Beginning an nmap script scan on $ip"
                echo
                nmap -sC $ip >> autoscan_temp3_$ip.txt
        else
                echo "Running scans in -Pn mode"
                nmap -Pn -sC $ip >> autoscan_temp3_$ip.txt
        fi
        cat autoscan_temp3_$ip.txt
        echo
        echo 
        ((id++))
        next_function
 }


gobuster_dir(){
        spaces > autoscan_temp1_$ip.txt
        banner >> autoscan_temp1_$ip.txt
        printf "Beginning Gobuster Directory Scan on port ${array[$number]}"
        echo
        gobuster dir -w $wordlist -t 30 -u "http://$ip:${array[$number]}" >> autoscan_temp1_$ip.txt
        cat autoscan_temp1_$ip.txt
        echo
        echo
        modulename="Gobuster Vhost Scan: Port ${array[$number]}"
}

#try to find way to make this work in initial scan

# gobuster_dns(){
#         banner > autoscan_temp2_$ip.txt
#         printf "Beginning Gobuster DNS Scan on port ${array[$number]}"
#         echo
#         gobuster dns -w $dnslist -t 30 -d "http://$ip:${array[$number]}" >> autoscan_temp2_$ip.txt
#         cat autoscan_temp2_$ip.txt
#         echo
#         echo
#         modulename="Gobuster Vhost Scan: Port ${array[$number]}"
# }

gobuster_vhost(){
        banner > autoscan_temp3_$ip.txt
        printf "Beginning Gobuster Vhost Scan on port ${array[$number]}"
        echo
        gobuster vhost -w $dnslist -t 30 -u $ip >> autoscan_temp3_$ip.txt
        cat autoscan_temp3_$ip.txt
        echo
        echo
        modulename="Gobuster DNS Scan: Port ${array[$number]}"
}













  http_check(){
        printf "Checking for HTTP/HTTPS ports on machine"
        echo
        http_exists=$(grep http completed_autonmap_$ip.txt)
        if [ -n "$http_exists" ]; then
                printf "(===================================================================)\n"
                printf "HTTP/HTTPS does exist on machine\n"
                echo
                printf "Retrieving active HTTP/HTTPS Ports\n"
                active_http_lines=$( grep http completed_autonmap_$ip.txt | sed -e '/^|_/d' -e 's/Starting//g' -e 's/Service//g' -e 's/Nmap//g' -e '/^ /d' -e '/^SF/d' | awk -F " " '{print $1}' | sort | uniq -c | wc -l )
                scannable_http=$( grep http completed_autonmap_$ip.txt | sed -e '/^|_/d' -e 's/Starting//g' -e 's/Service//g' -e 's/Nmap//g' -e '/^ /d' -e '/^SF/d' | awk -F " " '{print $1}' | sort | uniq -c | awk -F " " '{print $2}' | sed 's/[^0-9]*//g' )
                printf "$scannable_http" > ports_temp.txt
                http_sec_start="1"
                number="1"

                for ((i=http_sec_start; i<=active_http_lines; i++)); do
                        gatheredports=$( awk -v number=$number 'NR==number' ports_temp.txt )
                        array[$number]="$gatheredports"
                        printf "$gatheredports\n"
                        ((number++))
                done
                
                modulename="Gobuster Dir Scan: Port ${array[$number]}"
                http_sec_start="1"
                number="1"
                for ((i=http_sec_start; i<=active_http_lines; i++)); do
                        echo
                        echo
                        gobuster_dir
                        echo
                        echo
                        gobuster_vhost
                        echo
                        echo
                        find $current_dir -name 'autoscan_*' -exec cat {} \; > completed_goscan_$number.txt
                        find $current_dir -name 'autoscan_*' -exec rm {} \;
                        ((number++))
                done
                rm ports_temp.txt
                find $current_dir -name "completed_goscan*" -exec cat {} \; >> completed_autonmap_$ip.txt
                find $current_dir -name "completed_goscan*" -exec rm {} \;

        else
                printf "HTTP/HTTPS does not exist on machine.\n Moving to next check\n"
                modulename="Unfinished"
                next_function
        fi

        printf "(==========================================================================)\n"
        printf "\t\t\t InitialGobuster Enumeration Complete\n"
        printf "(==========================================================================)\n"
        id="5"
        next_function
 }

read -p 'Please enter the ip address you would like to scan: ' ip
echo
next_function